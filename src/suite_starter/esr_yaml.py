# Copyright 2020-2021 Axis Communications AB.
#
# For a full list of individual contributors, please see the commit history.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""YAML for launching ETOS Suite Runner in Kubernetes."""

ESR_YAML = (
    "apiVersion: batch/v1\n"
    "kind: Job\n"
    "metadata:\n"
    "  name: {job_name}\n"
    "  labels:\n"
    "    app: suite-runner\n"
    "    id: {suite_id}\n"
    "spec:\n"
    "  template:\n"
    "    metadata:\n"
    "      name: {job_name}\n"
    "    spec:\n"
    "      volumes:\n"
    "      - name: kubexit\n"
    "        emptyDir: {{}}\n"
    "      - name: graveyard\n"
    "        emptyDir:\n"
    "          medium: Memory\n"
    "      initContainers:\n"
    "      - name: kubexit\n"
    "        image: karlkfi/kubexit:latest\n"
    '        command: ["cp", "/bin/kubexit", "/kubexit/kubexit"]\n'
    "        volumeMounts:\n"
    "        - mountPath: /kubexit\n"
    "          name: kubexit\n"
    "      - name: create-queue\n"
    "        image: {log_listener}\n"
    '        command: ["python", "-u", "-m", "create_queue"]\n'
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "      serviceAccountName: etos-sa\n"
    "      containers:\n"
    "      - name: {job_name}\n"
    "        image: {docker_image}\n"
    "        imagePullPolicy: Always\n"
    "        command: ['sh', '-c']\n"
    "        args:\n"
    "        - |\n"
    "          /kubexit/kubexit python -u -m etos_suite_runner\n"
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "        - name: KUBEXIT_NAME\n"
    "          value: esr\n"
    "        - name: KUBEXIT_GRAVEYARD\n"
    "          value: /graveyard\n"
    "        volumeMounts:\n"
    "        - name: graveyard\n"
    "          mountPath: /graveyard\n"
    "        - name: kubexit\n"
    "          mountPath: /kubexit\n"
    "      - name: etos-log-listener\n"
    "        image: {log_listener}\n"
    "        imagePullPolicy: Always\n"
    "        command: ['sh', '-c']\n"
    "        args:\n"
    "        - |\n"
    "          /kubexit/kubexit python -u -m log_listener\n"
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "        - name: KUBEXIT_NAME\n"
    "          value: log_listener\n"
    "        - name: KUBEXIT_GRAVEYARD\n"
    "          value: /graveyard\n"
    "        - name: KUBEXIT_DEATH_DEPS\n"
    "          value: esr\n"
    "        volumeMounts:\n"
    "        - name: graveyard\n"
    "          mountPath: /graveyard\n"
    "        - name: kubexit\n"
    "          mountPath: /kubexit\n"
    "      restartPolicy: Never\n"
    "  backoffLimit: 0\n"
)


ESR_YAML_WITH_SIDECAR = (
    "apiVersion: batch/v1\n"
    "kind: Job\n"
    "metadata:\n"
    "  name: {job_name}\n"
    "  labels:\n"
    "    app: suite-runner\n"
    "    id: {suite_id}\n"
    "spec:\n"
    "  template:\n"
    "    metadata:\n"
    "      name: {job_name}\n"
    "    spec:\n"
    "      volumes:\n"
    "      - name: shared-logs\n"
    "        emptyDir: {{}}\n"
    "      - name: filebeat-config\n"
    "        configMap:\n"
    "          name: sidecar-config\n"
    "      - name: kubexit\n"
    "        emptyDir: {{}}\n"
    "      - name: graveyard\n"
    "        emptyDir:\n"
    "          medium: Memory\n"
    "      initContainers:\n"
    "      - name: kubexit\n"
    "        image: karlkfi/kubexit:latest\n"
    '        command: ["cp", "/bin/kubexit", "/kubexit/kubexit"]\n'
    "        volumeMounts:\n"
    "        - mountPath: /kubexit\n"
    "          name: kubexit\n"
    "      - name: create-queue\n"
    "        image: {log_listener}\n"
    '        command: ["python", "-u", "-m", "create_queue"]\n'
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "      serviceAccountName: etos-sa\n"
    "      containers:\n"
    "      - name: {job_name}\n"
    "        image: {docker_image}\n"
    "        imagePullPolicy: Always\n"
    "        command: ['sh', '-c']\n"
    "        args:\n"
    "        - |\n"
    "          /kubexit/kubexit python -u -m etos_suite_runner\n"
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "        - name: KUBEXIT_NAME\n"
    "          value: esr\n"
    "        - name: KUBEXIT_GRAVEYARD\n"
    "          value: /graveyard\n"
    "        volumeMounts:\n"
    "        - name: shared-logs\n"
    "          mountPath: /home/etos/logs\n"
    "        - name: graveyard\n"
    "          mountPath: /graveyard\n"
    "        - name: kubexit\n"
    "          mountPath: /kubexit\n"
    "      - name: etos-log-listener\n"
    "        image: {log_listener}\n"
    "        imagePullPolicy: Always\n"
    "        command: ['sh', '-c']\n"
    "        args:\n"
    "        - |\n"
    "          /kubexit/kubexit python -u -m log_listener\n"
    "        envFrom:\n"
    "        - configMapRef:\n"
    "            name: {etos_configmap}\n"
    "        - secretRef:\n"
    "            name: {etos_rabbitmq_secret}\n"
    "        env:\n"
    "        - name: TERCC\n"
    "          value: '{EiffelTestExecutionRecipeCollectionCreatedEvent}'\n"
    "        - name: KUBEXIT_NAME\n"
    "          value: log_listener\n"
    "        - name: KUBEXIT_GRAVEYARD\n"
    "          value: /graveyard\n"
    "        - name: KUBEXIT_DEATH_DEPS\n"
    "          value: esr\n"
    "        volumeMounts:\n"
    "        - name: graveyard\n"
    "          mountPath: /graveyard\n"
    "        - name: kubexit\n"
    "          mountPath: /kubexit\n"
    "      - name: sidecar\n"
    "        image: {sidecar_image}\n"
    "        command: ['sh', '-c']\n"
    "        args:\n"
    "        - |\n"
    "          /kubexit/kubexit /usr/local/bin/docker-entrypoint -environment container\n"
    "        env:\n"
    "        - name: KUBEXIT_NAME\n"
    "          value: sidecar\n"
    "        - name: KUBEXIT_GRAVEYARD\n"
    "          value: /graveyard\n"
    "        - name: KUBEXIT_DEATH_DEPS\n"
    "          value: esr\n"
    "        volumeMounts:\n"
    "        - name: shared-logs\n"
    "          mountPath: /usr/share/filebeat/logs\n"
    "        - name: filebeat-config\n"
    "          mountPath: /usr/share/filebeat/filebeat.yml\n"
    "          readOnly: true\n"
    "          subPath: filebeat.yml\n"
    "        - name: graveyard\n"
    "          mountPath: /graveyard\n"
    "        - name: kubexit\n"
    "          mountPath: /kubexit\n"
    "      restartPolicy: Never\n"
    "  backoffLimit: 0\n"
)
